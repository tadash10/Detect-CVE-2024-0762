import subprocess
import re
import platform
import sys
import logging

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def get_uefi_version():
    """Retrieve the UEFI firmware version."""
    try:
        if platform.system() == 'Windows':
            # Windows command to get UEFI firmware version
            command = ['wmic', 'bios', 'get', 'smbiosbiosversion']
            result = subprocess.check_output(command, text=True, stderr=subprocess.STDOUT)
            # Extract the firmware version from the command output
            version_match = re.search(r'(\d+\.\d+)', result)
            if version_match:
                version = version_match.group(1)
            else:
                logging.error("Failed to extract version from Windows command output.")
                sys.exit(1)
                
        elif platform.system() == 'Linux':
            # Linux command to get UEFI firmware version
            command = ['grep', '-i', 'bios version', '/sys/class/dmi/id/bios_version']
            result = subprocess.check_output(command, text=True, stderr=subprocess.STDOUT)
            # Extract the firmware version from the command output
            version_match = re.search(r'(\d+\.\d+)', result)
            if version_match:
                version = version_match.group(1)
            else:
                logging.error("Failed to extract version from Linux command output.")
                sys.exit(1)
                
        else:
            logging.error("Unsupported OS for firmware version detection.")
            sys.exit(1)
        
        return version.strip()
    
    except subprocess.CalledProcessError as e:
        logging.error(f"Subprocess error: {e.output}")
        sys.exit(1)
    except Exception as e:
        logging.error(f"Unexpected error: {e}")
        sys.exit(1)

def check_vulnerability(version):
    """Check if the firmware version is vulnerable to CVE-2024-0762."""
    vulnerable_versions = {
        '1.0': 'vulnerable_version_1',
        '2.0': 'vulnerable_version_2',
        # Add actual vulnerable firmware versions here
    }
    
    if version in vulnerable_versions:
        return True
    return False

def main():
    """Main function to run the detection script."""
    logging.info("Starting detection for CVE-2024-0762...")
    version = get_uefi_version()
    logging.info(f"Detected UEFI firmware version: {version}")
    
    if check_vulnerability(version):
        logging.warning("Vulnerability CVE-2024-0762 detected!")
    else:
        logging.info("No vulnerability detected.")

if __name__ == "__main__":
    main()
