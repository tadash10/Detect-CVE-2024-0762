import subprocess
import re
import platform
import sys
import logging
import requests

# Setup logging for security and troubleshooting
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# VirusTotal API Key (Replace 'your_api_key' with your actual API key)
VIRUSTOTAL_API_KEY = 'your_api_key'
VIRUSTOTAL_API_URL = 'https://www.virustotal.com/api/v3'

def execute_command(command):
    """Execute a command and return its output."""
    try:
        result = subprocess.check_output(command, text=True, stderr=subprocess.STDOUT)
        return result
    except subprocess.CalledProcessError as e:
        logging.error(f"Command '{' '.join(command)}' failed with exit code {e.returncode}. Output: {e.output}")
        sys.exit(1)
    except Exception as e:
        logging.error(f"Unexpected error executing command '{' '.join(command)}': {e}")
        sys.exit(1)

def get_uefi_version():
    """Retrieve the UEFI firmware version."""
    try:
        if platform.system() == 'Windows':
            command = ['wmic', 'bios', 'get', 'smbiosbiosversion']
            result = execute_command(command)
            # Extract the firmware version from the command output
            version_match = re.search(r'(\d+\.\d+)', result)
            if version_match:
                version = version_match.group(1)
            else:
                logging.error("Failed to extract version from Windows command output.")
                sys.exit(1)
                
        elif platform.system() == 'Linux':
            try:
                with open('/sys/class/dmi/id/bios_version', 'r') as file:
                    result = file.read()
                # Extract the firmware version from the command output
                version_match = re.search(r'(\d+\.\d+)', result)
                if version_match:
                    version = version_match.group(1)
                else:
                    logging.error("Failed to extract version from Linux bios_version file.")
                    sys.exit(1)
            except FileNotFoundError:
                logging.error("BIOS version file not found on Linux system.")
                sys.exit(1)
                
        else:
            logging.error("Unsupported OS for firmware version detection.")
            sys.exit(1)
        
        return version.strip()
    
    except Exception as e:
        logging.error(f"Unexpected error retrieving UEFI firmware version: {e}")
        sys.exit(1)

def check_vulnerability(version):
    """Check if the firmware version is vulnerable to CVE-2024-0762."""
    vulnerable_versions = {
        '1.0': 'vulnerable_version_1',
        '2.0': 'vulnerable_version_2',
        # Add actual vulnerable firmware versions here
    }
    
    if version in vulnerable_versions:
        logging.info(f"Firmware version {version} is vulnerable.")
        return True
    return False

def submit_to_virustotal(file_path):
    """Submit a file to VirusTotal and get the analysis report."""
    url = f"{VIRUSTOTAL_API_URL}/files"
    headers = {
        "x-apikey": VIRUSTOTAL_API_KEY
    }
    
    # Upload the file
    with open(file_path, 'rb') as file:
        response = requests.post(url, headers=headers, files={"file": file})
    
    if response.status_code == 200:
        result = response.json()
        return result['data']['id']
    else:
        logging.error(f"Failed to upload file to VirusTotal. Status code: {response.status_code}. Response: {response.text}")
        sys.exit(1)

def get_virustotal_report(file_id):
    """Get the VirusTotal report for a submitted file."""
    url = f"{VIRUSTOTAL_API_URL}/files/{file_id}"
    headers = {
        "x-apikey": VIRUSTOTAL_API_KEY
    }
    
    response = requests.get(url, headers=headers)
    
    if response.status_code == 200:
        result = response.json()
        return result['data']['attributes']['last_analysis_stats']
    else:
        logging.error(f"Failed to retrieve report from VirusTotal. Status code: {response.status_code}. Response: {response.text}")
        sys.exit(1)

def main():
    """Main function to run the detection script."""
    logging.info("Starting detection for CVE-2024-0762...")
    version = get_uefi_version()
    logging.info(f"Detected UEFI firmware version: {version}")
    
    if check_vulnerability(version):
        logging.warning("Vulnerability CVE-2024-0762 detected!")
        
        # Example of submitting a file to VirusTotal
        file_path = "path_to_file"  # Replace with the path to the file you want to analyze
        file_id = submit_to_virustotal(file_path)
        logging.info(f"File submitted to VirusTotal. File ID: {file_id}")
        
        # Get and print the report
        report = get_virustotal_report(file_id)
        logging.info(f"VirusTotal Report: {report}")
        
    else:
        logging.info("No vulnerability detected.")

if __name__ == "__main__":
    main()
