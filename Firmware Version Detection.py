#v2 comming soon 
import subprocess
import re
import platform
import sys

def get_uefi_version():
    """Retrieve the UEFI firmware version."""
    try:
        if platform.system() == 'Windows':
            # Windows command to get UEFI firmware version
            result = subprocess.check_output(['wmic', 'bios', 'get', 'smbiosbiosversion'], text=True)
            # Extract the firmware version from the command output
            version = re.search(r'(\d+\.\d+)', result).group(1)
        elif platform.system() == 'Linux':
            # Linux command to get UEFI firmware version
            result = subprocess.check_output(['dmesg', '|', 'grep', 'EFI', '|', 'grep', 'BIOS'], text=True)
            # Extract the firmware version from the command output
            version = re.search(r'BIOS version: (\d+\.\d+)', result).group(1)
        else:
            print("Unsupported OS for firmware version detection.")
            sys.exit(1)
        return version.strip()
    except Exception as e:
        print(f"Error retrieving UEFI firmware version: {e}")
        sys.exit(1)

def check_vulnerability(version):
    """Check if the firmware version is vulnerable to CVE-2024-0762."""
    vulnerable_versions = [
        'vulnerable_version_1',
        'vulnerable_version_2',
        # Add actual vulnerable firmware versions here
    ]
    if version in vulnerable_versions:
        return True
    return False

def main():
    """Main function to run the detection script."""
    print("Starting detection for CVE-2024-0762...")
    version = get_uefi_version()
    print(f"Detected UEFI firmware version: {version}")
    
    if check_vulnerability(version):
        print("Vulnerability CVE-2024-0762 detected!")
    else:
        print("No vulnerability detected.")

if __name__ == "__main__":
    main()
